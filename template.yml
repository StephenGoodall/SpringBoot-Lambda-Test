AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members

Resources:
  GetHelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.aws.codestar.projecttemplates.handler.HelloWorldHandler::handleRequest
      Runtime: java8
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref WebAppApi

  GetHelloWorldES:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.aws.codestar.projecttemplates.handler.HelloWorldHandler::handleRequestES
      Runtime: java8
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /es
            Method: get
            RestApiId: !Ref WebAppApi
            
  PostHelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.aws.codestar.projecttemplates.handler.HelloWorldHandler
      Runtime: java8
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref WebAppApi

  PostHelloWorldES:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.aws.codestar.projecttemplates.handler.HelloWorldHandler::handleRequestES
      Runtime: java8
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /es
            Method: post
            RestApiId: !Ref WebAppApi

  GetDate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.aws.codestar.projecttemplates.handler.DateHandler
      Runtime: java8
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /date
            Method: get
            RestApiId: !Ref WebAppApi
            
  WebAppApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          description: "This is a test API using Codestar and AWS SAM."
          version: "1.0.0"
          title: "Codestar Test"
          termsOfService: "http://swagger.io/terms/"
          contact:
            email: "stephen.goodall@oneadvanced.com"
          license:
            name: "Apache 2.0"
            url: "http://www.apache.org/licenses/LICENSE-2.0.html"
        host: "bs0fi97l5g.execute-api.eu-west-1.amazonaws.com"
        basePath: "/Prod"
        schemes:
        - "http"
        paths:
          /:
            post:
              tags:
              - "HelloWorld"
              summary: "Get the current time"
              description: "Returns current time as an Epoch"
              operationId: "helloWorldPOST"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "OK"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostHelloWorld.Arn}/invocations"
            get:
              tags:
              - "HelloWorld"
              summary: "Get the current time"
              description: "Returns current time as an Epoch"
              operationId: "helloWorldGET"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "OK"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetHelloWorld.Arn}/invocations"
          /es:
            post:
              tags:
              - "HelloWorldES"
              summary: "Get the current time in Spanish"
              description: "Returns current time as an Epoch - Spanish message"
              operationId: "helloWorldESPOST"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "OK"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostHelloWorldES.Arn}/invocations"
            get:
              tags:
              - "HelloWorldES"
              summary: "Get the current time in Spanish"
              description: "Returns current time as an Epoch - Spanish message"
              operationId: "helloWorldESGET"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "OK"
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetHelloWorldES.Arn}/invocations"
          /date:
            post:
              tags:
              - "date"
              summary: "Get the current date"
              description: "Returns current Date"
              operationId: "date"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "OK"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDate.Arn}/invocations"
        externalDocs:
          description: "Find out more about Swagger"
          url: "http://swagger.io"
Outputs:
  webappApiEndpoint:
    Description: WebApp URL for application
    Value: !Sub "https://${WebAppApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"